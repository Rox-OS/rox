type LimineFramebuffer = (
  address:    *Uint32,
  dimensions: (Uint64, Uint64),
  pitch:      Uint64,
  bpp:        Uint16,
  mem_model:  Uint8,
  r_mask:     (size: Uint8, shift: Uint8),
  g_mask:     (size: Uint8, shift: Uint8),
  b_mask:     (size: Uint8, shift: Uint8),
              Uint8,
  edid:       (size: Uint64, data: Address),
  modes:      (Uint64, Address)
);

type LimineFramebufferResponse = (
  revision:     Uint64,
  framebuffers: (Uint64, **LimineFramebuffer)
);

type LimineFramebufferRequest = (
  id:       [4]Uint64,
  revision: Uint64,
  response: *LimineFramebufferResponse
);

@(used(true), section(".requests"))
let LIMINE_BASE_VERSION = [3]Uint64 {
  0xf9562b2d5c95a6c8_u64,
  0x6a7b384944536bdc_u64,
  2_u64
};

@(used(true), section(".requests_beg_marker"))
let LIMINE_REQUESTS_BEG_MARKER = [4]Uint64 {
  0xf6b8f4b39de7d1ae_u64,
  0xfab91a6940fcb9cf_u64,
  0x785c6ed015d3e316_u64,
  0x181e920a7852b9d9_u64
};

@(used(true), section(".requests"))
let LIMINE_FRAMEBUFFER_REQUEST = LimineFramebufferRequest {
  [4]Uint64 {
    0xc7b1dd30df4c8b88_u64,
    0x0a82e883a194f07b_u64,
    0x9d5827dcd881dd75_u64,
    0xa3148604f6fab11b_u64
  },
  0_u64
};

@(used(true), section(".requests_end_marker"))
let LIMINE_REQUESTS_END_MARKER = [2]Uint64 {
  0xadc0e0531bb10d03_u64,
  0x9572709f31764c62_u64
};

fn kmain() {
  let fb = LIMINE_FRAMEBUFFER_REQUEST.response.framebuffers.1[0];
  let color = 0xff'ff'ff_u32;
  for let y = 0_u64; y < fb.dimensions.1; y = y + 1_u64 {
    for let x = 0_u64; x < fb.dimensions.0; x = x + 1_u64 {
      fb.address[y * fb.dimensions.0 + x] = (x + y) as Uint32;
    }
  }
  for {}
}