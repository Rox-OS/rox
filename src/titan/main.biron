module titan;

type LimineFramebuffer = (
  address:    *Uint32,
  dimensions: (Uint64, Uint64),
  pitch:      Uint64,
  bpp:        Uint16,
  mem_model:  Uint8,
  r_mask:     (size: Uint8, shift: Uint8),
  g_mask:     (size: Uint8, shift: Uint8),
  b_mask:     (size: Uint8, shift: Uint8),
              Uint8,
  edid:       (size: Uint64, data: Address),
  modes:      (Uint64, Address)
);

type LimineFramebufferRequest = (
  id:       [4]Uint64,
  revision: Uint64,
  response: *LimineFramebufferResponse
);

type LimineFramebufferResponse = (
  revision:     Uint64,
  framebuffers: (Uint64, **LimineFramebuffer)
);

type LimineHHDMRequest = (
  id:       [4]Uint64,
  revision: Uint64,
  response: *LimineHHDMResponse
);

type LimineHHDMResponse = (
  revision: Uint64,
  offset:   Uint64
);

type LimineStackSizeRequest = (
  id:       [4]Uint64,
  revision: Uint64,
  response: *LimineStackSizeResponse,
  size:     Uint64
);

type LimineStackSizeResponse = (
  revision: Uint64
);

@(used(true), section(".requests"))
let LIMINE_BASE_VERSION = [3]Uint64 {
  0xf9562b2d5c95a6c8_u64,
  0x6a7b384944536bdc_u64,
  2_u64
};

@(used(true), section(".requests_beg_marker"))
let LIMINE_REQUESTS_BEG_MARKER = [4]Uint64 {
  0xf6b8f4b39de7d1ae_u64,
  0xfab91a6940fcb9cf_u64,
  0x785c6ed015d3e316_u64,
  0x181e920a7852b9d9_u64
};

@(used(true), section(".requests"))
let LIMINE_HHDM_REQUEST = LimineHHDMRequest {
  [4]Uint64 {
    0xc7b1dd30df4c8b88_u64,
    0x0a82e883a194f07b_u64,
    0x48dcf1cb8ad2b852_u64,
    0x63984e959a98244b_u64,
  },
  0_u64
};

@(used(true), section(".requests"))
let LIMINE_STACK_SIZE_REQUEST = LimineStackSizeRequest {
  [4]Uint64 {
    0xc7b1dd30df4c8b88_u64,
    0x0a82e883a194f07b_u64,
    0x224ef0460a8e8926_u64,
    0xe1cb0fc25f46ea3d_u64,
  },
  0_u64,
  0_u64,
  128_u64 * 1024_u64 * 1024_u64, // 128 MiB
};

@(used(true), section(".requests"))
let LIMINE_FRAMEBUFFER_REQUEST = LimineFramebufferRequest {
  [4]Uint64 {
    0xc7b1dd30df4c8b88_u64,
    0x0a82e883a194f07b_u64,
    0x9d5827dcd881dd75_u64,
    0xa3148604f6fab11b_u64
  },
  1_u64
};

@(used(true), section(".requests_end_marker"))
let LIMINE_REQUESTS_END_MARKER = [2]Uint64 {
  0xadc0e0531bb10d03_u64,
  0x9572709f31764c62_u64
};

// An 8x8 Latin font
let FONT = [128][8]Uint8 {
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x18_u8, 0x3C_u8, 0x3C_u8, 0x18_u8, 0x18_u8, 0x00_u8, 0x18_u8, 0x00_u8 },
  [8]Uint8 { 0x36_u8, 0x36_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x36_u8, 0x36_u8, 0x7F_u8, 0x36_u8, 0x7F_u8, 0x36_u8, 0x36_u8, 0x00_u8 },
  [8]Uint8 { 0x0C_u8, 0x3E_u8, 0x03_u8, 0x1E_u8, 0x30_u8, 0x1F_u8, 0x0C_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x63_u8, 0x33_u8, 0x18_u8, 0x0C_u8, 0x66_u8, 0x63_u8, 0x00_u8 },
  [8]Uint8 { 0x1C_u8, 0x36_u8, 0x1C_u8, 0x6E_u8, 0x3B_u8, 0x33_u8, 0x6E_u8, 0x00_u8 },
  [8]Uint8 { 0x06_u8, 0x06_u8, 0x03_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x18_u8, 0x0C_u8, 0x06_u8, 0x06_u8, 0x06_u8, 0x0C_u8, 0x18_u8, 0x00_u8 },
  [8]Uint8 { 0x06_u8, 0x0C_u8, 0x18_u8, 0x18_u8, 0x18_u8, 0x0C_u8, 0x06_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x66_u8, 0x3C_u8, 0xFF_u8, 0x3C_u8, 0x66_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x0C_u8, 0x0C_u8, 0x3F_u8, 0x0C_u8, 0x0C_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x0C_u8, 0x0C_u8, 0x06_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x3F_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x0C_u8, 0x0C_u8, 0x00_u8 },
  [8]Uint8 { 0x60_u8, 0x30_u8, 0x18_u8, 0x0C_u8, 0x06_u8, 0x03_u8, 0x01_u8, 0x00_u8 },
  [8]Uint8 { 0x3E_u8, 0x63_u8, 0x73_u8, 0x7B_u8, 0x6F_u8, 0x67_u8, 0x3E_u8, 0x00_u8 },
  [8]Uint8 { 0x0C_u8, 0x0E_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x3F_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x33_u8, 0x30_u8, 0x1C_u8, 0x06_u8, 0x33_u8, 0x3F_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x33_u8, 0x30_u8, 0x1C_u8, 0x30_u8, 0x33_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x38_u8, 0x3C_u8, 0x36_u8, 0x33_u8, 0x7F_u8, 0x30_u8, 0x78_u8, 0x00_u8 },
  [8]Uint8 { 0x3F_u8, 0x03_u8, 0x1F_u8, 0x30_u8, 0x30_u8, 0x33_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x1C_u8, 0x06_u8, 0x03_u8, 0x1F_u8, 0x33_u8, 0x33_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x3F_u8, 0x33_u8, 0x30_u8, 0x18_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x33_u8, 0x33_u8, 0x1E_u8, 0x33_u8, 0x33_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x33_u8, 0x33_u8, 0x3E_u8, 0x30_u8, 0x18_u8, 0x0E_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x0C_u8, 0x0C_u8, 0x00_u8, 0x00_u8, 0x0C_u8, 0x0C_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x0C_u8, 0x0C_u8, 0x00_u8, 0x00_u8, 0x0C_u8, 0x0C_u8, 0x06_u8 },
  [8]Uint8 { 0x18_u8, 0x0C_u8, 0x06_u8, 0x03_u8, 0x06_u8, 0x0C_u8, 0x18_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x3F_u8, 0x00_u8, 0x00_u8, 0x3F_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x06_u8, 0x0C_u8, 0x18_u8, 0x30_u8, 0x18_u8, 0x0C_u8, 0x06_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x33_u8, 0x30_u8, 0x18_u8, 0x0C_u8, 0x00_u8, 0x0C_u8, 0x00_u8 },
  [8]Uint8 { 0x3E_u8, 0x63_u8, 0x7B_u8, 0x7B_u8, 0x7B_u8, 0x03_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x0C_u8, 0x1E_u8, 0x33_u8, 0x33_u8, 0x3F_u8, 0x33_u8, 0x33_u8, 0x00_u8 },
  [8]Uint8 { 0x3F_u8, 0x66_u8, 0x66_u8, 0x3E_u8, 0x66_u8, 0x66_u8, 0x3F_u8, 0x00_u8 },
  [8]Uint8 { 0x3C_u8, 0x66_u8, 0x03_u8, 0x03_u8, 0x03_u8, 0x66_u8, 0x3C_u8, 0x00_u8 },
  [8]Uint8 { 0x1F_u8, 0x36_u8, 0x66_u8, 0x66_u8, 0x66_u8, 0x36_u8, 0x1F_u8, 0x00_u8 },
  [8]Uint8 { 0x7F_u8, 0x46_u8, 0x16_u8, 0x1E_u8, 0x16_u8, 0x46_u8, 0x7F_u8, 0x00_u8 },
  [8]Uint8 { 0x7F_u8, 0x46_u8, 0x16_u8, 0x1E_u8, 0x16_u8, 0x06_u8, 0x0F_u8, 0x00_u8 },
  [8]Uint8 { 0x3C_u8, 0x66_u8, 0x03_u8, 0x03_u8, 0x73_u8, 0x66_u8, 0x7C_u8, 0x00_u8 },
  [8]Uint8 { 0x33_u8, 0x33_u8, 0x33_u8, 0x3F_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x78_u8, 0x30_u8, 0x30_u8, 0x30_u8, 0x33_u8, 0x33_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x67_u8, 0x66_u8, 0x36_u8, 0x1E_u8, 0x36_u8, 0x66_u8, 0x67_u8, 0x00_u8 },
  [8]Uint8 { 0x0F_u8, 0x06_u8, 0x06_u8, 0x06_u8, 0x46_u8, 0x66_u8, 0x7F_u8, 0x00_u8 },
  [8]Uint8 { 0x63_u8, 0x77_u8, 0x7F_u8, 0x7F_u8, 0x6B_u8, 0x63_u8, 0x63_u8, 0x00_u8 },
  [8]Uint8 { 0x63_u8, 0x67_u8, 0x6F_u8, 0x7B_u8, 0x73_u8, 0x63_u8, 0x63_u8, 0x00_u8 },
  [8]Uint8 { 0x1C_u8, 0x36_u8, 0x63_u8, 0x63_u8, 0x63_u8, 0x36_u8, 0x1C_u8, 0x00_u8 },
  [8]Uint8 { 0x3F_u8, 0x66_u8, 0x66_u8, 0x3E_u8, 0x06_u8, 0x06_u8, 0x0F_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x3B_u8, 0x1E_u8, 0x38_u8, 0x00_u8 },
  [8]Uint8 { 0x3F_u8, 0x66_u8, 0x66_u8, 0x3E_u8, 0x36_u8, 0x66_u8, 0x67_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x33_u8, 0x07_u8, 0x0E_u8, 0x38_u8, 0x33_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x3F_u8, 0x2D_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x33_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x3F_u8, 0x00_u8 },
  [8]Uint8 { 0x33_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x1E_u8, 0x0C_u8, 0x00_u8 },
  [8]Uint8 { 0x63_u8, 0x63_u8, 0x63_u8, 0x6B_u8, 0x7F_u8, 0x77_u8, 0x63_u8, 0x00_u8 },
  [8]Uint8 { 0x63_u8, 0x63_u8, 0x36_u8, 0x1C_u8, 0x1C_u8, 0x36_u8, 0x63_u8, 0x00_u8 },
  [8]Uint8 { 0x33_u8, 0x33_u8, 0x33_u8, 0x1E_u8, 0x0C_u8, 0x0C_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x7F_u8, 0x63_u8, 0x31_u8, 0x18_u8, 0x4C_u8, 0x66_u8, 0x7F_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x06_u8, 0x06_u8, 0x06_u8, 0x06_u8, 0x06_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x03_u8, 0x06_u8, 0x0C_u8, 0x18_u8, 0x30_u8, 0x60_u8, 0x40_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x18_u8, 0x18_u8, 0x18_u8, 0x18_u8, 0x18_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x08_u8, 0x1C_u8, 0x36_u8, 0x63_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0xFF_u8 },
  [8]Uint8 { 0x0C_u8, 0x0C_u8, 0x18_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x1E_u8, 0x30_u8, 0x3E_u8, 0x33_u8, 0x6E_u8, 0x00_u8 },
  [8]Uint8 { 0x07_u8, 0x06_u8, 0x06_u8, 0x3E_u8, 0x66_u8, 0x66_u8, 0x3B_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x1E_u8, 0x33_u8, 0x03_u8, 0x33_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x38_u8, 0x30_u8, 0x30_u8, 0x3e_u8, 0x33_u8, 0x33_u8, 0x6E_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x1E_u8, 0x33_u8, 0x3f_u8, 0x03_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x1C_u8, 0x36_u8, 0x06_u8, 0x0f_u8, 0x06_u8, 0x06_u8, 0x0F_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x6E_u8, 0x33_u8, 0x33_u8, 0x3E_u8, 0x30_u8, 0x1F_u8 },
  [8]Uint8 { 0x07_u8, 0x06_u8, 0x36_u8, 0x6E_u8, 0x66_u8, 0x66_u8, 0x67_u8, 0x00_u8 },
  [8]Uint8 { 0x0C_u8, 0x00_u8, 0x0E_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x30_u8, 0x00_u8, 0x30_u8, 0x30_u8, 0x30_u8, 0x33_u8, 0x33_u8, 0x1E_u8 },
  [8]Uint8 { 0x07_u8, 0x06_u8, 0x66_u8, 0x36_u8, 0x1E_u8, 0x36_u8, 0x67_u8, 0x00_u8 },
  [8]Uint8 { 0x0E_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x33_u8, 0x7F_u8, 0x7F_u8, 0x6B_u8, 0x63_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x1F_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x1E_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x3B_u8, 0x66_u8, 0x66_u8, 0x3E_u8, 0x06_u8, 0x0F_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x6E_u8, 0x33_u8, 0x33_u8, 0x3E_u8, 0x30_u8, 0x78_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x3B_u8, 0x6E_u8, 0x66_u8, 0x06_u8, 0x0F_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x3E_u8, 0x03_u8, 0x1E_u8, 0x30_u8, 0x1F_u8, 0x00_u8 },
  [8]Uint8 { 0x08_u8, 0x0C_u8, 0x3E_u8, 0x0C_u8, 0x0C_u8, 0x2C_u8, 0x18_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x6E_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x1E_u8, 0x0C_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x63_u8, 0x6B_u8, 0x7F_u8, 0x7F_u8, 0x36_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x63_u8, 0x36_u8, 0x1C_u8, 0x36_u8, 0x63_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x3E_u8, 0x30_u8, 0x1F_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x3F_u8, 0x19_u8, 0x0C_u8, 0x26_u8, 0x3F_u8, 0x00_u8 },
  [8]Uint8 { 0x38_u8, 0x0C_u8, 0x0C_u8, 0x07_u8, 0x0C_u8, 0x0C_u8, 0x38_u8, 0x00_u8 },
  [8]Uint8 { 0x18_u8, 0x18_u8, 0x18_u8, 0x00_u8, 0x18_u8, 0x18_u8, 0x18_u8, 0x00_u8 },
  [8]Uint8 { 0x07_u8, 0x0C_u8, 0x0C_u8, 0x38_u8, 0x0C_u8, 0x0C_u8, 0x07_u8, 0x00_u8 },
  [8]Uint8 { 0x6E_u8, 0x3B_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 } 
};

fn make_color(fb: *LimineFramebuffer, r: Uint32, g: Uint32, b: Uint32) -> Uint32 {
  return (r << fb.r_mask.shift as Uint32) |
         (g << fb.g_mask.shift as Uint32) |
         (b << fb.b_mask.shift as Uint32);
}

type Particle = (
  position: [2]Real32,
  velocity: [2]Real32,
  density:  Real32
);

let H = 2.0_f32;
let INV_H = 0.5_f32;
let REST_DENSITY = 1.0_f32;

fn sph_kernel(r: Real32) -> Real32 {
  let result = 0.45372841_f32; // 40 / (7 * pi * h^2)
  let q = r * INV_H;
  if (q <= 0.5_f32) {
    result = result * (q*q*q - q*q) + 1.0_f32;
  } else {
    let a = 1.0_f32 - q;
    result = result * 2.0_f32 * a*a*a;
  }
  return result;
}

@(export(true))
fn memset(dst: *Uint8, value: Uint32, num: Uint64) {
  let ch  = (value & 0xff_u32) as Uint8;
  for let i = 0_u64; i < num; i = i + 1_u64 {
    dst[i] = ch;
  }
}

// When in the kernel we do not want the Redzone and we want Biron to always
// setup the stack so it's 16-byte aligned. This behavior is required by SysV
// and will be true of all other functions but not necessarily the entry point.
// We also need to export the kmain so the bootloader can actually call us. This
// entry point is set in link.ld.
@(export(true), redzone(false), alignstack(16))
fn kmain() {
  enable_fpu();

  // Ensure we support 128 MiB stack, Higher-Half Direct Map and a XRGB Framebuffer
  if LIMINE_STACK_SIZE_REQUEST.response == 0_u64 as *LimineStackSizeResponse {
    for {}
  }
  if LIMINE_HHDM_REQUEST.response == 0_u64 as *LimineHHDMResponse {
    for {}
  }
  if LIMINE_FRAMEBUFFER_REQUEST.response == 0_u64 as *LimineFramebufferResponse {
    for {}
  }

  let fb = LIMINE_FRAMEBUFFER_REQUEST.response.framebuffers.1[0];

  let world_width  = fb.dimensions.0 as Real32;
  let world_height = fb.dimensions.1 as Real32;

  let n_particles_x = 64_u64;
  let n_particles_y = 64_u64;
  let n_particles = n_particles_x * n_particles_y;
  let particles = [64_u64 * 64_u64]Particle{};

  let block_x = (world_width  - (n_particles_x as Real32)) * 0.5_f32;
  let block_y = (world_height - (n_particles_y as Real32)) * 0.5_f32;

  for let y = 0_u64; y < n_particles_y; y = y + 1_u64 {
    for let x = 0_u64; x < n_particles_x; x = x + 1_u64 {
      let particle = &particles[y * n_particles_x + x];
      particle.position[0] = block_x + (x as Real32) * 1_f32;
      particle.position[1] = block_y + (y as Real32) * 1_f32;

      particle.velocity[0] = 1_f32;
    }
  }

  /*
  // Then print "Hello RoxOS!" in the center of the screen in yellow.
  let msg = [12]Uint8 { 'H', 'e', 'l', 'l', 'o', ' ', 'R', 'o', 'x', 'O', 'S', '!' };
  let PX = (fb.dimensions.0 >> 1_u64) - (12_u64 >> 1_u64) * 8_u64;
  let PY = (fb.dimensions.1 >> 1_u64) - (8_u64  >> 1_u64) * 8_u64;
  let px = PX;
  let py = PY;
  for let y = 0_u32; y < 8_u32; y = y + 1_u32 {
    for let i = 0_u32; i < 12_u32; i = i + 1_u32 {
      let bits = FONT[msg[i]][y] as Uint32;
      for let x = 0_u32; x < 8_u32; x = x + 1_u32 {
        let set = bits & (1_u32 << x);
        if set != 0_u32 {
          let dst = &fb.address[py * fb.dimensions.0];
          dst[px] = make_color(fb, 0xff_u32, 0xff_u32, 0x00_u32);
        } else {
          // printf(" ");
        }
        px = px + 1_u64;
      }
    }
    py = py + 1_u64;
    px = PX;
  }
  */

  // Then burn forever.
  for {
    // Move the particles around.
    for let i = 0_u64; i < n_particles; i = i + 1_u64 {
      let particle = &particles[i];
      particle.position[0] = particle.position[0] + particle.velocity[0];
      particle.position[1] = particle.position[1] + particle.velocity[1];
    }

    // Simulation
    for let i = 0_u64; i < n_particles; i = i + 1_u64 {
      let particle = &particles[i];
      particle.density = 0_f32;
      for let j = 0_u64; j < n_particles; j = j + 1_u64 {
        let neighbor = &particles[j];
        let delta = [2]Real32{
          neighbor.position[0] - particle.position[0],
          neighbor.position[1] - particle.position[1]
        };
        let r = sqrt(delta[0] * delta[0] + delta[1] * delta[1]);
        if r < H {
          particle.density = particle.density + sph_kernel(r);
        }
      }
    }

    // Clear the framebuffer to a nice shade of grey.
    for let y = 0_u64; y < fb.dimensions.1; y = y + 1_u64 {
      for let x = 0_u64; x < fb.dimensions.0; x = x + 1_u64 {
        fb.address[y * fb.dimensions.0 + x] = make_color(fb, 0x20_u32, 0x20_u32, 0x20_u32);
      }
    }

    // Draw the particles.
    for let i = 0_u64; i < n_particles; i = i + 1_u64 {
      let x = particles[i].position[0] as Sint64;
      let y = particles[i].position[1] as Sint64;
      if x >= 0_s64 && x < (fb.dimensions.0 as Sint64) && y >= 0_s64 && y < (fb.dimensions.1 as Sint64) {
        let color = (0_u32, 0_u32, 0_u32);

        let density = particles[i].density - REST_DENSITY;
        if density > 0_f32 {
          if density > 1_f32 {
            density = 1_f32;
          }
          color.0 = 0x00_u32;
          color.1 = 0xff_u32;
          color.2 = ((1_f32 - density) * 255_f32) as Uint32;
        } else {
          density = -density;
          if density > 1_f32 {
            density = 1_f32;
          }
          color.0 = (density * 255_f32) as Uint32;
          color.1 = ((1_f32 - density) * 255_f32) as Uint32;
          color.2 = ((1_f32 - density) * 255_f32) as Uint32;
        }

        fb.address[y * (fb.dimensions.0 as Sint64) + x] = make_color(fb, ...color);
      }
    }
  }
}