module titan;

type LimineFramebuffer = (
  address:    *Uint32,
  dimensions: (Uint64, Uint64),
  pitch:      Uint64,
  bpp:        Uint16,
  mem_model:  Uint8,
  r_mask:     (size: Uint8, shift: Uint8),
  g_mask:     (size: Uint8, shift: Uint8),
  b_mask:     (size: Uint8, shift: Uint8),
              Uint8,
  edid:       (size: Uint64, data: Address),
  modes:      (Uint64, Address)
);

type LimineFramebufferRequest = (
  id:       [4]Uint64,
  revision: Uint64,
  response: *LimineFramebufferResponse
);

type LimineFramebufferResponse = (
  revision:     Uint64,
  framebuffers: (Uint64, **LimineFramebuffer)
);

type LimineHHDMRequest = (
  id:       [4]Uint64,
  revision: Uint64,
  response: *LimineHHDMResponse
);

type LimineHHDMResponse = (
  revision: Uint64,
  offset:   Uint64
);

@(used(true), section(".requests"))
let LIMINE_BASE_VERSION = [3]Uint64 {
  0xf9562b2d5c95a6c8_u64,
  0x6a7b384944536bdc_u64,
  2_u64
};

@(used(true), section(".requests_beg_marker"))
let LIMINE_REQUESTS_BEG_MARKER = [4]Uint64 {
  0xf6b8f4b39de7d1ae_u64,
  0xfab91a6940fcb9cf_u64,
  0x785c6ed015d3e316_u64,
  0x181e920a7852b9d9_u64
};

@(used(true), section(".requests"))
let LIMINE_FRAMEBUFFER_REQUEST = LimineFramebufferRequest {
  [4]Uint64 {
    0xc7b1dd30df4c8b88_u64,
    0x0a82e883a194f07b_u64,
    0x9d5827dcd881dd75_u64,
    0xa3148604f6fab11b_u64
  },
  0_u64
};

@(used(true), section(".requests"))
let LIMNE_HHDM_REQUEST = LimineHHDMRequest {
  [4]Uint64 {
    0xc7b1dd30df4c8b88_u64,
    0x0a82e883a194f07b_u64,
    0x48dcf1cb8ad2b852_u64,
    0x63984e959a98244b_u64,
  },
  0_u64
};

@(used(true), section(".requests_end_marker"))
let LIMINE_REQUESTS_END_MARKER = [2]Uint64 {
  0xadc0e0531bb10d03_u64,
  0x9572709f31764c62_u64
};

// An 8x8 Latin font
let FONT = [128][8]Uint8 {
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x18_u8, 0x3C_u8, 0x3C_u8, 0x18_u8, 0x18_u8, 0x00_u8, 0x18_u8, 0x00_u8 },
  [8]Uint8 { 0x36_u8, 0x36_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x36_u8, 0x36_u8, 0x7F_u8, 0x36_u8, 0x7F_u8, 0x36_u8, 0x36_u8, 0x00_u8 },
  [8]Uint8 { 0x0C_u8, 0x3E_u8, 0x03_u8, 0x1E_u8, 0x30_u8, 0x1F_u8, 0x0C_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x63_u8, 0x33_u8, 0x18_u8, 0x0C_u8, 0x66_u8, 0x63_u8, 0x00_u8 },
  [8]Uint8 { 0x1C_u8, 0x36_u8, 0x1C_u8, 0x6E_u8, 0x3B_u8, 0x33_u8, 0x6E_u8, 0x00_u8 },
  [8]Uint8 { 0x06_u8, 0x06_u8, 0x03_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x18_u8, 0x0C_u8, 0x06_u8, 0x06_u8, 0x06_u8, 0x0C_u8, 0x18_u8, 0x00_u8 },
  [8]Uint8 { 0x06_u8, 0x0C_u8, 0x18_u8, 0x18_u8, 0x18_u8, 0x0C_u8, 0x06_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x66_u8, 0x3C_u8, 0xFF_u8, 0x3C_u8, 0x66_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x0C_u8, 0x0C_u8, 0x3F_u8, 0x0C_u8, 0x0C_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x0C_u8, 0x0C_u8, 0x06_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x3F_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x0C_u8, 0x0C_u8, 0x00_u8 },
  [8]Uint8 { 0x60_u8, 0x30_u8, 0x18_u8, 0x0C_u8, 0x06_u8, 0x03_u8, 0x01_u8, 0x00_u8 },
  [8]Uint8 { 0x3E_u8, 0x63_u8, 0x73_u8, 0x7B_u8, 0x6F_u8, 0x67_u8, 0x3E_u8, 0x00_u8 },
  [8]Uint8 { 0x0C_u8, 0x0E_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x3F_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x33_u8, 0x30_u8, 0x1C_u8, 0x06_u8, 0x33_u8, 0x3F_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x33_u8, 0x30_u8, 0x1C_u8, 0x30_u8, 0x33_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x38_u8, 0x3C_u8, 0x36_u8, 0x33_u8, 0x7F_u8, 0x30_u8, 0x78_u8, 0x00_u8 },
  [8]Uint8 { 0x3F_u8, 0x03_u8, 0x1F_u8, 0x30_u8, 0x30_u8, 0x33_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x1C_u8, 0x06_u8, 0x03_u8, 0x1F_u8, 0x33_u8, 0x33_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x3F_u8, 0x33_u8, 0x30_u8, 0x18_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x33_u8, 0x33_u8, 0x1E_u8, 0x33_u8, 0x33_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x33_u8, 0x33_u8, 0x3E_u8, 0x30_u8, 0x18_u8, 0x0E_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x0C_u8, 0x0C_u8, 0x00_u8, 0x00_u8, 0x0C_u8, 0x0C_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x0C_u8, 0x0C_u8, 0x00_u8, 0x00_u8, 0x0C_u8, 0x0C_u8, 0x06_u8 },
  [8]Uint8 { 0x18_u8, 0x0C_u8, 0x06_u8, 0x03_u8, 0x06_u8, 0x0C_u8, 0x18_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x3F_u8, 0x00_u8, 0x00_u8, 0x3F_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x06_u8, 0x0C_u8, 0x18_u8, 0x30_u8, 0x18_u8, 0x0C_u8, 0x06_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x33_u8, 0x30_u8, 0x18_u8, 0x0C_u8, 0x00_u8, 0x0C_u8, 0x00_u8 },
  [8]Uint8 { 0x3E_u8, 0x63_u8, 0x7B_u8, 0x7B_u8, 0x7B_u8, 0x03_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x0C_u8, 0x1E_u8, 0x33_u8, 0x33_u8, 0x3F_u8, 0x33_u8, 0x33_u8, 0x00_u8 },
  [8]Uint8 { 0x3F_u8, 0x66_u8, 0x66_u8, 0x3E_u8, 0x66_u8, 0x66_u8, 0x3F_u8, 0x00_u8 },
  [8]Uint8 { 0x3C_u8, 0x66_u8, 0x03_u8, 0x03_u8, 0x03_u8, 0x66_u8, 0x3C_u8, 0x00_u8 },
  [8]Uint8 { 0x1F_u8, 0x36_u8, 0x66_u8, 0x66_u8, 0x66_u8, 0x36_u8, 0x1F_u8, 0x00_u8 },
  [8]Uint8 { 0x7F_u8, 0x46_u8, 0x16_u8, 0x1E_u8, 0x16_u8, 0x46_u8, 0x7F_u8, 0x00_u8 },
  [8]Uint8 { 0x7F_u8, 0x46_u8, 0x16_u8, 0x1E_u8, 0x16_u8, 0x06_u8, 0x0F_u8, 0x00_u8 },
  [8]Uint8 { 0x3C_u8, 0x66_u8, 0x03_u8, 0x03_u8, 0x73_u8, 0x66_u8, 0x7C_u8, 0x00_u8 },
  [8]Uint8 { 0x33_u8, 0x33_u8, 0x33_u8, 0x3F_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x78_u8, 0x30_u8, 0x30_u8, 0x30_u8, 0x33_u8, 0x33_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x67_u8, 0x66_u8, 0x36_u8, 0x1E_u8, 0x36_u8, 0x66_u8, 0x67_u8, 0x00_u8 },
  [8]Uint8 { 0x0F_u8, 0x06_u8, 0x06_u8, 0x06_u8, 0x46_u8, 0x66_u8, 0x7F_u8, 0x00_u8 },
  [8]Uint8 { 0x63_u8, 0x77_u8, 0x7F_u8, 0x7F_u8, 0x6B_u8, 0x63_u8, 0x63_u8, 0x00_u8 },
  [8]Uint8 { 0x63_u8, 0x67_u8, 0x6F_u8, 0x7B_u8, 0x73_u8, 0x63_u8, 0x63_u8, 0x00_u8 },
  [8]Uint8 { 0x1C_u8, 0x36_u8, 0x63_u8, 0x63_u8, 0x63_u8, 0x36_u8, 0x1C_u8, 0x00_u8 },
  [8]Uint8 { 0x3F_u8, 0x66_u8, 0x66_u8, 0x3E_u8, 0x06_u8, 0x06_u8, 0x0F_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x3B_u8, 0x1E_u8, 0x38_u8, 0x00_u8 },
  [8]Uint8 { 0x3F_u8, 0x66_u8, 0x66_u8, 0x3E_u8, 0x36_u8, 0x66_u8, 0x67_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x33_u8, 0x07_u8, 0x0E_u8, 0x38_u8, 0x33_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x3F_u8, 0x2D_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x33_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x3F_u8, 0x00_u8 },
  [8]Uint8 { 0x33_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x1E_u8, 0x0C_u8, 0x00_u8 },
  [8]Uint8 { 0x63_u8, 0x63_u8, 0x63_u8, 0x6B_u8, 0x7F_u8, 0x77_u8, 0x63_u8, 0x00_u8 },
  [8]Uint8 { 0x63_u8, 0x63_u8, 0x36_u8, 0x1C_u8, 0x1C_u8, 0x36_u8, 0x63_u8, 0x00_u8 },
  [8]Uint8 { 0x33_u8, 0x33_u8, 0x33_u8, 0x1E_u8, 0x0C_u8, 0x0C_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x7F_u8, 0x63_u8, 0x31_u8, 0x18_u8, 0x4C_u8, 0x66_u8, 0x7F_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x06_u8, 0x06_u8, 0x06_u8, 0x06_u8, 0x06_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x03_u8, 0x06_u8, 0x0C_u8, 0x18_u8, 0x30_u8, 0x60_u8, 0x40_u8, 0x00_u8 },
  [8]Uint8 { 0x1E_u8, 0x18_u8, 0x18_u8, 0x18_u8, 0x18_u8, 0x18_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x08_u8, 0x1C_u8, 0x36_u8, 0x63_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0xFF_u8 },
  [8]Uint8 { 0x0C_u8, 0x0C_u8, 0x18_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x1E_u8, 0x30_u8, 0x3E_u8, 0x33_u8, 0x6E_u8, 0x00_u8 },
  [8]Uint8 { 0x07_u8, 0x06_u8, 0x06_u8, 0x3E_u8, 0x66_u8, 0x66_u8, 0x3B_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x1E_u8, 0x33_u8, 0x03_u8, 0x33_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x38_u8, 0x30_u8, 0x30_u8, 0x3e_u8, 0x33_u8, 0x33_u8, 0x6E_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x1E_u8, 0x33_u8, 0x3f_u8, 0x03_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x1C_u8, 0x36_u8, 0x06_u8, 0x0f_u8, 0x06_u8, 0x06_u8, 0x0F_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x6E_u8, 0x33_u8, 0x33_u8, 0x3E_u8, 0x30_u8, 0x1F_u8 },
  [8]Uint8 { 0x07_u8, 0x06_u8, 0x36_u8, 0x6E_u8, 0x66_u8, 0x66_u8, 0x67_u8, 0x00_u8 },
  [8]Uint8 { 0x0C_u8, 0x00_u8, 0x0E_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x30_u8, 0x00_u8, 0x30_u8, 0x30_u8, 0x30_u8, 0x33_u8, 0x33_u8, 0x1E_u8 },
  [8]Uint8 { 0x07_u8, 0x06_u8, 0x66_u8, 0x36_u8, 0x1E_u8, 0x36_u8, 0x67_u8, 0x00_u8 },
  [8]Uint8 { 0x0E_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x0C_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x33_u8, 0x7F_u8, 0x7F_u8, 0x6B_u8, 0x63_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x1F_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x1E_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x1E_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x3B_u8, 0x66_u8, 0x66_u8, 0x3E_u8, 0x06_u8, 0x0F_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x6E_u8, 0x33_u8, 0x33_u8, 0x3E_u8, 0x30_u8, 0x78_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x3B_u8, 0x6E_u8, 0x66_u8, 0x06_u8, 0x0F_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x3E_u8, 0x03_u8, 0x1E_u8, 0x30_u8, 0x1F_u8, 0x00_u8 },
  [8]Uint8 { 0x08_u8, 0x0C_u8, 0x3E_u8, 0x0C_u8, 0x0C_u8, 0x2C_u8, 0x18_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x6E_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x1E_u8, 0x0C_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x63_u8, 0x6B_u8, 0x7F_u8, 0x7F_u8, 0x36_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x63_u8, 0x36_u8, 0x1C_u8, 0x36_u8, 0x63_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x33_u8, 0x33_u8, 0x33_u8, 0x3E_u8, 0x30_u8, 0x1F_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x3F_u8, 0x19_u8, 0x0C_u8, 0x26_u8, 0x3F_u8, 0x00_u8 },
  [8]Uint8 { 0x38_u8, 0x0C_u8, 0x0C_u8, 0x07_u8, 0x0C_u8, 0x0C_u8, 0x38_u8, 0x00_u8 },
  [8]Uint8 { 0x18_u8, 0x18_u8, 0x18_u8, 0x00_u8, 0x18_u8, 0x18_u8, 0x18_u8, 0x00_u8 },
  [8]Uint8 { 0x07_u8, 0x0C_u8, 0x0C_u8, 0x38_u8, 0x0C_u8, 0x0C_u8, 0x07_u8, 0x00_u8 },
  [8]Uint8 { 0x6E_u8, 0x3B_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 },
  [8]Uint8 { 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8 } 
};

fn make_color(fb: *LimineFramebuffer, r: Uint32, g: Uint32, b: Uint32) -> Uint32 {
  return (r << fb.r_mask.shift as Uint32) |
         (g << fb.g_mask.shift as Uint32) |
         (b << fb.b_mask.shift as Uint32);
}

// When in the kernel we do not want the Redzone and we want Biron to always
// setup the stack so it's 16-byte aligned. This behavior is required by SysV
// and will be true of all other functions but not necessarily the entry point.
// We also need to export the kmain so the bootloader can actually call us. This
// entry point is set in link.ld.
@(export(true), redzone(false), alignstack(16))
fn kmain() {
  let fb = LIMINE_FRAMEBUFFER_REQUEST.response.framebuffers.1[0];

  // Clear the framebuffer to a nice shade of grey.
  for let y = 0_u64; y < fb.dimensions.1; y = y + 1_u64 {
    for let x = 0_u64; x < fb.dimensions.0; x = x + 1_u64 {
      fb.address[y * fb.dimensions.0 + x] = make_color(fb, 0x20_u32, 0x20_u32, 0x20_u32);
    }
  }

  // Then print "Hello RoxOS!" in the center of the screen in yellow.
  let msg = [12]Uint8 { 'H', 'e', 'l', 'l', 'o', ' ', 'R', 'o', 'x', 'O', 'S', '!' };
  let PX = (fb.dimensions.0 >> 1_u64) - (12_u64 >> 1_u64) * 8_u64;
  let PY = (fb.dimensions.1 >> 1_u64) - (8_u64  >> 1_u64) * 8_u64;
  let px = PX;
  let py = PY;
  for let y = 0_u32; y < 8_u32; y = y + 1_u32 {
    for let i = 0_u32; i < 12_u32; i = i + 1_u32 {
      let bits = FONT[msg[i]][y] as Uint32;
      for let x = 0_u32; x < 8_u32; x = x + 1_u32 {
        let set = bits & (1_u32 << x);
        if set != 0_u32 {
          let dst = &fb.address[py * fb.dimensions.0];
          dst[px] = make_color(fb, 0xff_u32, 0xff_u32, 0x00_u32);
        } else {
          // printf(" ");
        }
        px = px + 1_u64;
      }
    }
    py = py + 1_u64;
    px = PX;
  }

  // Then burn forever.
  for {}
}